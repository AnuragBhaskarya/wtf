#!/bin/bash

# Exit on any error
set -e

# Get the version being installed
VERSION="$2"

# Function to get real user
get_real_user() {
    if [ -n "$SUDO_USER" ]; then
        echo "$SUDO_USER"
    elif [ -n "$PKEXEC_UID" ]; then
        echo "$(id -nu "$PKEXEC_UID")"
    elif [ -n "$REAL_USER" ]; then
        echo "$REAL_USER"
    else
        # Get the user running the display server
        local display_user=$(who | grep -F '(:0)' | head -n1 | cut -d ' ' -f1)
        if [ -n "$display_user" ]; then
            echo "$display_user"
        else
            # Fallback: try to get the first non-root user with a home directory
            echo "$(getent passwd | grep /home | cut -d: -f1 | head -n1)"
        fi
    fi
}

# Detect architecture
ARCH=$(uname -m)

# Map architectures to binaries
if [ "$ARCH" = "x86_64" ]; then
    BINARY="/usr/bin/wtf_amd64"
elif [ "$ARCH" = "i686" ] || [ "$ARCH" = "i386" ]; then
    BINARY="/usr/bin/wtf_i386"
else
    echo "Error: Unsupported architecture: $ARCH" >&2
    exit 1
fi

# Check if binary exists
if [ ! -f "$BINARY" ]; then
    echo "Error: Binary not found: $BINARY" >&2
    exit 1
fi

# Create symlink for the correct binary
ln -sf "$BINARY" /usr/bin/wtf
chmod +x /usr/bin/wtf

# Get the real user
REAL_USER=$(get_real_user)

if [ -z "$REAL_USER" ]; then
    echo "Error: Could not determine the actual user" >&2
    exit 1
fi

# Get user's home directory
USER_HOME=$(eval echo ~${REAL_USER})
if [ -z "$USER_HOME" ]; then
    USER_HOME=$(getent passwd "$REAL_USER" | cut -d: -f6)
fi

if [ -z "$USER_HOME" ]; then
    echo "Error: Could not determine home directory" >&2
    exit 1
fi

WTF_DIR="$USER_HOME/.wtf"
WTF_RES_DIR="$WTF_DIR/res"

# Create directories if they don't exist
mkdir -p "$WTF_RES_DIR"

# Copy definitions file with error checking
if ! cp /.wtf/res/definitions.txt "$WTF_RES_DIR/definitions.txt"; then
    echo "Error: Failed to copy definitions.txt" >&2
    exit 1
fi

# Create added.txt and removed.txt only if they don't exist
if [ ! -f "$WTF_RES_DIR/added.txt" ]; then
    touch "$WTF_RES_DIR/added.txt"
fi

if [ ! -f "$WTF_RES_DIR/removed.txt" ]; then
    touch "$WTF_RES_DIR/removed.txt"
fi

# Set proper ownership
chown -R "${REAL_USER}:${REAL_USER}" "$WTF_DIR"
chmod -R 755 "$WTF_DIR"
chmod 644 "$WTF_RES_DIR"/*.txt

echo "Successfully installed WTF for architecture: $ARCH"